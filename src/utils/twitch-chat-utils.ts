// region Generated types

// Generated by https://quicktype.io

import { AbstractrrrApiClient } from "./AbstractrrrApiClient.ts";
import { Pronoun } from "./pronouns.ts";

export type AbstractrrrEvent = AuthEvent | IRCEvent;

export interface AuthEvent {
  event_type: "auth";
  event_data: {
    auth_data: {
      authenticated: boolean;
    };
    meta: {
      request_id: string;
    };
  };
}

export interface IRCEventPing {
  irc_type: "PingMessage";
  irc_data: {
    raw: string;
    type: number;
    raw_type: string;
    message: string;
  };
}

export interface IRCEventClearChat {
  irc_type: "ClearChatMessage";
  irc_data: IRCEventClearChatData;
}

export interface IRCEventClearChatData {
  raw: string;
  type: number;
  raw_type: "CLEARCHAT";
  ban_duration: number;
  target_user_id: string;
  target_username: string;
}

export interface IRCEventPong {
  irc_type: "PongMessage";
  irc_data: {
    raw: string;
    type: number;
    raw_type: string;
    message: string;
  };
}

export interface IRCEventPrivateMessage {
  irc_type: "PrivateMessage";
  irc_data: IRCData;
}

export type IRCEvent = {
  event_type: "irc";
  event_data:
    | IRCEventPrivateMessage
    | IRCEventPong
    | IRCEventPing
    | IRCEventClearChat;
};

export interface IRCData {
  user: User;
  raw: string;
  type: number;
  raw_type: string;
  tags: { [key: string]: string };
  message: string;
  channel: string;
  room_id: string;
  id: string;
  time: string;
  emotes: IRCEmoteInMessageData[] | null;
  bits: number;
  action: boolean;
  first_message: boolean;
  reply: null;
  custom_reward_id: string;
}

export type IRCEmoteInMessageData = {
  name: string;
  id: string;
  count: number;
  positions: {
    start: number;
    end: number;
  }[];
};

export interface User {
  id: string;
  name: string;
  display_name: string;
  color: string;
  badges: Badges;
}

export interface Badges {
  broadcaster?: number;
  "bits-leader"?: number;
  "gift-leader"?: number;
  founder?: number;
  bits?: number;
  subscriber?: number;
  moderator?: number;
  vip?: number;
}

export interface ChatBadgesResponse {
  data: ChatBadgeSet[];
}

export interface ChatBadgeSet {
  set_id: "bits" | "subscriber";
  versions: ChatBadgeVersionData[];
}

export interface ChatBadgeVersionData {
  id: string;
  image_url_1x: string;
  image_url_2x: string;
  image_url_4x: string;
  title: string;
}

export interface ChatEmote {
  id: string;
  name: string;
  images: {
    url_1x: string;
    url_2x: string;
    url_4x: string;
  };
}

export interface UserResponse {
  data: {
    profile_image_url: string
  }[]
}

// endregion Generated types

// region UI types

export type TwitchChatMessage = {
  username: string;
  color: string;
  subBadgeUrl: string | null;
  bitsBadgeUrl: string | null;
  giftBadgeUrl: string | null;
  broadcaster: boolean;
  moderator: boolean;
  vip: boolean;
  pronouns: Pronoun | null;
  avatarUrl: string | null;
  message: string;
};

export const sampleVisibleMessagesData: TwitchChatMessage[] = [
  {
    username: "techygrrrl",
    color: "#F100BC",
    broadcaster: true,
    moderator: false,
    vip: false,
    pronouns: {
      display: "She/Her",
      name: "sheher",
    },
    message: 'testing some emotes <span class="emote-wrapper"><img src="https://static-cdn.jtvnw.net/emoticons/v2/25/default/dark/2.0" class="emote" /></span> test <span class="emote-wrapper"><img src="https://static-cdn.jtvnw.net/emoticons/v2/1/default/dark/2.0" class="emote" /></span> <span class="emote-wrapper"><img src="https://static-cdn.jtvnw.net/emoticons/v2/36/default/dark/2.0" class="emote" /></span> yep <span class="emote-wrapper"><img src="https://static-cdn.jtvnw.net/emoticons/v2/emotesv2_11461ca766174124b4d6fba913d046fa/default/dark/2.0" class="emote" /></span> <span class="emote-wrapper"><img src="https://static-cdn.jtvnw.net/emoticons/v2/emotesv2_8d597504027f46958675df7bdbab107c/default/dark/2.0" class="emote" /></span>',
    subBadgeUrl: null,
    giftBadgeUrl: "https://static.twitchcdn.net/assets/GiftBadge-Bronze_36-fd0ee2ef5196b3414a2f.png",
    bitsBadgeUrl: null,
    avatarUrl: 'https://static-cdn.jtvnw.net/jtv_user_pictures/70ec2fd6-a9a2-47c3-9b12-db19afeff021-profile_image-300x300.png',
  },
  {
    username: "founder1337",
    color: "#807694",
    broadcaster: false,
    moderator: false,
    vip: false,
    pronouns: null,
    message: "The quick brown fox jumped over the lazy dog",
    subBadgeUrl: "https://static-cdn.jtvnw.net/badges/v1/511b78a9-ab37-472f-9569-457753bbe7d3/2",
    giftBadgeUrl: null,
    bitsBadgeUrl: null,
    avatarUrl: null,
  },
  {
    username: "techydrrroid",
    color: "#31C296",
    broadcaster: false,
    moderator: true,
    vip: false,
    pronouns: {
      display: "It/its",
      name: "itits",
    },
    message: "The quick brown fox jumped over the lazy dog",
    subBadgeUrl: null,
    giftBadgeUrl: null,
    avatarUrl: 'https://static-cdn.jtvnw.net/jtv_user_pictures/721fdfb8-0fd7-480b-826a-50a123b9ec5f-profile_image-300x300.png',
    bitsBadgeUrl: "https://static.twitchcdn.net/assets/BitsBadge-Silver_36-2194db3d68f51d3dd14c.png",
  },
  {
    username: "techygrrrl",
    color: "#F100BC",
    broadcaster: true,
    moderator: false,
    vip: false,
    pronouns: {
      display: "She/Her",
      name: "sheher",
    },
    message: "The quick brown fox jumped over the lazy dog",
    subBadgeUrl: null,
    giftBadgeUrl: "https://static.twitchcdn.net/assets/GiftBadge-Bronze_36-fd0ee2ef5196b3414a2f.png",
    bitsBadgeUrl: null,
    avatarUrl: null,
  },
  {
    username: "justinfan1337",
    color: "#7638DF",
    broadcaster: false,
    moderator: false,
    vip: false,
    pronouns: {
      display: "He/Him",
      name: "hehim",
    },
    message: "The quick brown fox jumped over the lazy dog",
    subBadgeUrl: null,
    giftBadgeUrl: null,
    bitsBadgeUrl: null,
    avatarUrl: null,
  },
];

// endregion UI types

export const ircDataToTwitchChatMessage = ({
  data,
  chatBadgeLookup,
  pronouns,
  avatarUrl,
}: {
  data: IRCData;
  chatBadgeLookup: ChatBadgeLookup;
  pronouns: Pronoun | null;
  avatarUrl: string | null;
}): TwitchChatMessage => ({
  username: data.user.display_name,
  color: data.tags.color || "#807694",
  message: htmlMessageForData(data),
  broadcaster: data.user.badges.broadcaster === 1,
  moderator: data.user.badges.moderator === 1,
  vip: data.user.badges.vip === 1,
  giftBadgeUrl: giftBadgeForData(data),
  bitsBadgeUrl: bitsBadgeForData(data, chatBadgeLookup),
  subBadgeUrl: subBadgeForData(data, chatBadgeLookup),
  avatarUrl,
  pronouns,
});

const sensitiveEmotes = [
  ">(",
  "<3",
  "R)",
  ";p",
  ":p",
  ";)",
  ":\\",
  ":|",
  "O_o",
  "B)",
  ":O",
  ":D",
  ":(",
  ":)",
];

const htmlMessageForData = (data: IRCData): string => {
  let message = data.message;

  (data.emotes || []).forEach((emote: IRCEmoteInMessageData) => {
    const url = emoteUrlForEmoteId(emote.id);

    if (!url) return;

    if (sensitiveEmotes.includes(emote.name)) {
      while (message.includes(emote.name)) {
        message = message.replace(emote.name, wrapEmoteHtml(url));
      }
    } else {
      const re = new RegExp("\\b" + emote.name + "\\b", "g");
      message = message.replace(re, wrapEmoteHtml(url));
    }
  });

  return message;
};

const emoteUrlForEmoteId = (id: string): string | null =>
  `https://static-cdn.jtvnw.net/emoticons/v2/${id}/default/light/2.0`;

const wrapEmoteHtml = (imageUrl: string): string => {
  return `
    <span class="emote-wrapper">
      <img src="${imageUrl}" class="emote" />
    </span>
  `;
};

const subBadgeForData = (
  data: IRCData,
  chatBadgeLookup: ChatBadgeLookup,
): string | null => {
  if (
    typeof data.user.badges["founder"] === "number" ||
    data.user.badges["founder"] === 0
  ) {
    return "https://static-cdn.jtvnw.net/badges/v1/511b78a9-ab37-472f-9569-457753bbe7d3/2";
  }

  if (!data.user.badges.subscriber) return null;

  const subBadge = chatBadgeLookup.subscriber[`${data.user.badges.subscriber}`];
  if (!subBadge) return null;

  return subBadge.image_url_2x || null;
};

const giftBadgeForData = (data: IRCData): string | null => {
  // todo: Verify that gift-leader 1 works
  if (data.user.badges["gift-leader"] === 1) {
    return "https://static-cdn.jtvnw.net/badges/v1/21656088-7da2-4467-acd2-55220e1f45ad/2";
  }
  // todo: Verify that gift-leader 2 works
  if (data.user.badges["gift-leader"] === 2) {
    return "https://static.twitchcdn.net/assets/GiftBadge-Silver_36-bb7c268e0452a2cdcc8d.png";
  }
  // todo: Verify that gift-leader 3 works
  if (data.user.badges["gift-leader"] === 3) {
    return "https://static.twitchcdn.net/assets/GiftBadge-Bronze_36-fd0ee2ef5196b3414a2f.png";
  }
  return null;
};

const bitsBadgeForData = (
  data: IRCData,
  chatBadgeLookup: ChatBadgeLookup,
): string | null => {
  if (data.user.badges["bits-leader"] === 1) {
    return "https://static-cdn.jtvnw.net/badges/v1/8bedf8c3-7a6d-4df2-b62f-791b96a5dd31/2";
  }
  // todo: Verify that bits-leader 2 works
  if (data.user.badges["bits-leader"] === 2) {
    return "https://static.twitchcdn.net/assets/BitsBadge-Silver_36-2194db3d68f51d3dd14c.png";
  }
  // todo: Verify that bits-leader 3 works
  if (data.user.badges["bits-leader"] === 3) {
    return "https://static.twitchcdn.net/assets/BitsBadge-Bronze_36-a9a8deeb17fa7fd7b7b3.png";
  }
  if (data.user.badges.bits) {
    return chatBadgeLookup.bits[`${data.user.badges.bits}`]?.image_url_2x;
  }

  return null;
};

export type ChatBadgeLookup = Record<
  "bits" | "subscriber",
  Record<string, ChatBadgeVersionData>
>;

export const transformChatBadgesResponseToLookup = (
  response: ChatBadgesResponse,
): ChatBadgeLookup => {
  const lookup: Record<
    "bits" | "subscriber",
    Record<string, ChatBadgeVersionData>
  > = {
    bits: {},
    subscriber: {},
  };

  response.data.forEach((chatBadgeSet) => {
    chatBadgeSet.versions.forEach((version) => {
      lookup[chatBadgeSet.set_id][version.id] = version;
    });
  });

  return lookup;
};

// region Twitch user

const twitchUserCache = new Map<string, string>();

export const getTwitchUserAvatar = async (id: string, apiClient: AbstractrrrApiClient): Promise<string | null> => {
  const cachedUserProfile = twitchUserCache.get(id)
  if (cachedUserProfile) return cachedUserProfile

  try {
    const res = await apiClient.makeGet<UserResponse>(`/v1/api/helix/users?id=${id}`);

    const avatarUrl = res.data.data[0].profile_image_url || null
    if (avatarUrl) {
      twitchUserCache.set(id, avatarUrl)
    }

    return avatarUrl
  } catch (e) {
    console.error(e)
    return null
  }
}

// endregion Twitch user
