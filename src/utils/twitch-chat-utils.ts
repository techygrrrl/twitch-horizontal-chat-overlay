// region Generated types

// Generated by https://quicktype.io

export type AbstractrrrEvent = AuthEvent | IRCEvent;

export interface AuthEvent {
  event_type: "auth";
  event_data: {
    auth_data: {
      authenticated: boolean;
    };
    meta: {
      request_id: string;
    };
  };
}

export interface IRCEventPing {
  irc_type: "PingMessage";
  irc_data: {
    raw: string;
    type: number;
    raw_type: string;
    message: string;
  };
}

export interface IRCEventClearChat {
  irc_type: "ClearChatMessage";
  irc_data: IRCEventClearChatData;
}

export interface IRCEventClearChatData {
  raw: string;
  type: number;
  raw_type: "CLEARCHAT";
  ban_duration: number;
  target_user_id: string;
  target_username: string;
}

export interface IRCEventPong {
  irc_type: "PongMessage";
  irc_data: {
    raw: string;
    type: number;
    raw_type: string;
    message: string;
  };
}

export interface IRCEventPrivateMessage {
  irc_type: "PrivateMessage";
  irc_data: IRCData;
}

export type IRCEvent = {
  event_type: "irc";
  event_data:
    | IRCEventPrivateMessage
    | IRCEventPong
    | IRCEventPing
    | IRCEventClearChat;
};

export interface IRCData {
  user: User;
  raw: string;
  type: number;
  raw_type: string;
  tags: { [key: string]: string };
  message: string;
  channel: string;
  room_id: string;
  id: string;
  time: string;
  emotes: null;
  bits: number;
  action: boolean;
  first_message: boolean;
  reply: null;
  custom_reward_id: string;
}

export interface User {
  id: string;
  name: string;
  display_name: string;
  color: string;
  badges: Badges;
}

export interface Badges {
  broadcaster?: number;
  "bits-leader"?: number;
  "gift-leader"?: number;
  bits?: number;
  subscriber?: number;
  moderator?: number;
  vip?: number;
}

export interface ChatBadgesResponse {
  data: ChatBadgeSet[];
}

export interface ChatBadgeSet {
  set_id: "bits" | "subscriber";
  versions: ChatBadgeVersionData[];
}

export interface ChatBadgeVersionData {
  id: string;
  image_url_1x: string;
  image_url_2x: string;
  image_url_4x: string;
  title: string;
}

// endregion Generated types

// region UI types

export type TwitchChatMessage = {
  username: string;
  color: string;
  subBadgeUrl: string | null;
  bitsBadgeUrl: string | null;
  broadcaster: boolean;
  moderator: boolean;
  vip: boolean;
  pronouns: string | null;
  message: string; // TODO: inject nodes??
};

// endregion UI types

export const ircDataToTwitchChatMessage = (
  data: IRCData,
  chatBadgeLookup: ChatBadgeLookup
): TwitchChatMessage => ({
  username: data.user.display_name,
  color: data.tags.color || "#fff",
  message: data.message,
  broadcaster: data.user.badges.broadcaster === 1,
  moderator: data.user.badges.moderator === 1,
  vip: data.user.badges.vip === 1,
  bitsBadgeUrl: bitsBadgeForData(data, chatBadgeLookup),
  subBadgeUrl: data.user.badges.subscriber
    ? chatBadgeLookup.subscriber[`${data.user.badges.subscriber}`]
        ?.image_url_2x || null
    : null,
  pronouns: null, // todo:
});

const bitsBadgeForData = (
  data: IRCData,
  chatBadgeLookup: ChatBadgeLookup
): string | null => {
  if (data.user.badges["bits-leader"] === 1) {
    return "https://static-cdn.jtvnw.net/badges/v1/8bedf8c3-7a6d-4df2-b62f-791b96a5dd31/2";
  }
  // todo: Verify that bits-leader 2 works
  if (data.user.badges["bits-leader"] === 2) {
    return "https://static.twitchcdn.net/assets/BitsBadge-Silver_36-2194db3d68f51d3dd14c.png";
  }
  // todo: Verify that bits-leader 3 works
  if (data.user.badges["bits-leader"] === 3) {
    return "https://static.twitchcdn.net/assets/BitsBadge-Bronze_36-a9a8deeb17fa7fd7b7b3.png";
  }
  // todo: Verify that gift-leader 1 works
  if (data.user.badges["gift-leader"] === 1) {
    return "https://static-cdn.jtvnw.net/badges/v1/21656088-7da2-4467-acd2-55220e1f45ad/2";
  }
  // todo: Verify that gift-leader 2 works
  if (data.user.badges["gift-leader"] === 2) {
    return "https://static.twitchcdn.net/assets/GiftBadge-Silver_36-bb7c268e0452a2cdcc8d.png";
  }
  // todo: Verify that gift-leader 3 works
  if (data.user.badges["gift-leader"] === 3) {
    return "https://static.twitchcdn.net/assets/GiftBadge-Bronze_36-fd0ee2ef5196b3414a2f.png";
  }
  if (data.user.badges.bits) {
    return chatBadgeLookup.bits[`${data.user.badges.bits}`]?.image_url_2x;
  }

  return null;
};

export type ChatBadgeLookup = Record<
  "bits" | "subscriber",
  Record<string, ChatBadgeVersionData>
>;

export const transformChatBadgesResponseToLookup = (
  response: ChatBadgesResponse
): ChatBadgeLookup => {
  const lookup: Record<
    "bits" | "subscriber",
    Record<string, ChatBadgeVersionData>
  > = {
    bits: {},
    subscriber: {},
  };

  response.data.forEach((chatBadgeSet) => {
    chatBadgeSet.versions.forEach((version) => {
      lookup[chatBadgeSet.set_id][version.id] = version;
    });
  });

  return lookup;
};
